name: CI/CD to AKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: flask-app

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform init & apply
        working-directory: ./terraform
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Get outputs
        id: tf
        run: |
          ACR=$(terraform output -raw acr_login_server)
          RG=$(terraform output -raw resource_group)
          AKS=$(terraform output -raw aks_name)
          echo "acr=$ACR" >> $GITHUB_OUTPUT
          echo "rg=$RG" >> $GITHUB_OUTPUT
          echo "aks=$AKS" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          IMAGE=${{ steps.tf.outputs.acr }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker build -t $IMAGE .
          echo "IMAGE=$IMAGE" >> image.env

      - name: Push to ACR
        run: |
          ACR_HOST=${{ steps.tf.outputs.acr }}
          IMAGE=$ACR_HOST/${{ env.IMAGE_NAME }}:${{ github.sha }}
          az acr login --name ${ACR_HOST%%.*}
          docker tag $IMAGE $IMAGE
          docker push $IMAGE

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ steps.tf.outputs.rg }} --name ${{ steps.tf.outputs.aks }} --overwrite-existing
          kubectl config current-context

      - name: Deploy to AKS
        run: |
          IMAGE=${{ steps.tf.outputs.acr }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          sed -i "s|IMAGE_PLACEHOLDER|$IMAGE|g" k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl rollout status deployment/flask-app --timeout=120s
